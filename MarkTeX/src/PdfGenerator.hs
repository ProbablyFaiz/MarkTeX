-- | The module `PdfGenerator` contains utility functions to convert a MarkDown AST to a latex or pdf file.
-- The `documentToPdf` function converts a `RootExpr` to a pdf file.
-- The `documentToLatex` and `latexToPdf` functions perform the intermediate steps of converting a `RootExpr` to a latex string and converting a latex file to a pdf file respectively.
module PdfGenerator (documentToPdf, latexToPdf, documentToLatex) where

import Language (RootExpr)
import LatexGenerator (documentToLatex)
import TemplateLang (TData)

import GHC.IO.Exception (ExitCode(..))
import System.Process (system)

-- | The `documentToPdf` function takes a `RootExpr` together with certain document settings in a `TData` format and converts it to a pdf file.
documentToPdf :: RootExpr -> TData -> FilePath -> IO ()
documentToPdf rootExpr docSettings pdfFileName = do

    -- File name for intermediate tex state
    let tempTexFile = "tempFile.tex"

    -- Convert the RootExpr AST to a LaTeX string
    let texString = documentToLatex rootExpr docSettings --TODO: docSettings are not supported yet

    -- Write the LaTeX to the intermediate file
    writeFile tempTexFile texString

    -- Convert the latex file to a pdf file with pdflatex
    exitCode <- latexToPdf tempTexFile pdfFileName

    -- Handle the value of the exit code
    handleExitCode exitCode
     
-- | The `latexToPdf` function converts a latex file into a pdf file.
latexToPdf :: FilePath -> FilePath -> IO ExitCode
latexToPdf texFile pdfFile = system $ pdfLatexCommand texFile pdfFile
    where
        pdfLatexCommand :: FilePath -> FilePath -> String
        pdfLatexCommand tex pdf = "pdflatex -jobname=" ++ pdf ++ " " ++ tex
        --TODO: cleanup temporary files generated by pdflatex
        -- generate pdf in temp folder, copy pdf to main folder, then delete temp folder?
        -- option -output-directory=DIR only works when DIR exists

-- | The `handleExitCode` function determines what to output to the user depending on the exit code of the system command that is ran on the command line.
handleExitCode :: ExitCode -> IO ()
handleExitCode exitCode = 
    case exitCode of
        ExitSuccess -> do
            putStrLn "Successfully converted the MarkDown to a pdf file!"
        ExitFailure n -> do
            putStrLn $ "Converting the MarkDown to a pdf file led to a failure with exit code " ++ show n ++ "\n"
                     ++ "Make sure that pdflatex is installed on your system."
            --TODO: possibly handle case distinction on n -> what are possible failure codes
